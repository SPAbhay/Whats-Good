import asynciofrom sqlalchemy import textfrom .base_class import enginefrom ...core.config import Settingsasync def test_connection():    config = Settings()    print(f"Attempting to connect with URL: {config.DATABASE_URL}")    try:        async with engine.connect() as conn:            # Use text() to create executable SQL statement            result = await conn.execute(text("SELECT 1"))            print("Successfully connected to database!")            # Fetch the result            value = result.scalar()            print(f"Test query result: {value}")            # Let's also check what tables exist            result = await conn.execute(                text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"))            tables = result.scalars().all()            print("\nExisting tables:")            for table in tables:                print(f"- {table}")            await conn.commit()    except Exception as e:        print(f"Connection failed: {e}")        print(f"Error type: {type(e)}")if __name__ == "__main__":    asyncio.run(test_connection())